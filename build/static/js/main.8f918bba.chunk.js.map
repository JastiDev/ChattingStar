{"version":3,"sources":["modules/fakeAuth.js","pages/LogIn.js","pages/Home.js","components/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","LogIn","useState","setIsBusy","history","useHistory","from","useLocation","state","pathname","onClickLogIn","e","a","replace","console","log","className","autoPlay","loop","muted","src","type","alt","onClick","placeholder","Home","PrivateRoute","children","rest","render","location","to","App","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oTAAaA,EAAW,CACtBC,iBAAiB,EACjBC,aAFsB,SAETC,GACXH,EAASC,iBAAkB,EAC3BG,WAAWD,EAAI,MAEjBE,QANsB,SAMdF,GACNH,EAASC,iBAAkB,EAC3BG,WAAWD,EAAI,OCQNG,EAAQ,WAAO,IAAD,EACGC,qBADH,mBACVC,GADU,WAGrBC,EAAUC,cAGRC,GAFSC,cAESC,OAAS,CAAEF,KAAM,CAAEG,SAAU,OAA/CH,KAOAI,EAAY,uCAAG,WAAMC,GAAN,SAAAC,EAAA,6DACnBT,GAAU,GADS,uBALnBR,EAASE,cAAa,WACpBO,EAAQS,QAAQP,MAIC,sDAKjBQ,QAAQC,IAAR,MALiB,OAOnBZ,GAAU,GAPS,yDAAH,sDAclB,OACE,6BACE,2BAAOa,UAAU,mBAAmBC,UAAQ,EAACC,MAAI,EAACC,OAAK,GACrD,4BAAQC,IAAI,8BAA8BC,KAAK,cADjD,8CAKA,yBAAKL,UAAU,kBACb,yBAAKI,IAAI,0BAA0BJ,UAAU,WAAWM,IAAI,UAG9D,yBAAKN,UAAU,kBACb,6CAEA,4BAAQA,UAAU,mBAAmBO,QAlBrB,SAAAZ,GACpBG,QAAQC,IAAI,YAiBR,KAIA,2BACEM,KAAK,QACLL,UAAU,eACVQ,YAAY,UAEd,2BACEH,KAAK,WACLL,UAAU,eACVQ,YAAY,aAGd,4BAAQR,UAAU,aAAaO,QAASb,GAAxC,aC5DKe,EAAO,WAClB,OACE,6BACE,2BAAOT,UAAU,mBAAmBC,UAAQ,EAACC,MAAI,EAACC,OAAK,GACrD,4BAAQC,IAAI,8BAA8BC,KAAK,cADjD,8CAKA,yBAAKL,UAAU,UACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,kB,QCVhB,SAASU,EAAT,GAA8C,IAAtBC,EAAqB,EAArBA,SAAaC,EAAQ,4BAClD,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,gBAAGC,EAAH,EAAGA,SAAH,OACNnC,EAASC,gBACP+B,EAEA,kBAAC,IAAD,CACEI,GAAI,CACFtB,SAAU,SACVD,MAAO,CAAEF,KAAMwB,UCAdE,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,OAGF,kBAACR,EAAD,CAAcQ,KAAK,KACjB,kBAAC,EAAD,UCLUC,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCZNC,IAASV,OACP,kBAAC,IAAMW,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.8f918bba.chunk.js","sourcesContent":["export const fakeAuth = {\r\n  isAuthenticated: false,\r\n  authenticate(cb) {\r\n    fakeAuth.isAuthenticated = true;\r\n    setTimeout(cb, 100); // fake async\r\n  },\r\n  signout(cb) {\r\n    fakeAuth.isAuthenticated = false;\r\n    setTimeout(cb, 100);\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"../App.scss\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useHistory,\r\n  useLocation\r\n} from \"react-router-dom\";\r\n\r\nimport { fakeAuth } from \"../modules/fakeAuth.js\";\r\n\r\nexport const LogIn = () => {\r\n  const [isBusy, setIsBusy] = useState();\r\n\r\n  let history = useHistory();\r\n  let location = useLocation();\r\n\r\n  let { from } = location.state || { from: { pathname: \"/\" } };\r\n  let login = () => {\r\n    fakeAuth.authenticate(() => {\r\n      history.replace(from);\r\n    });\r\n  };\r\n\r\n  const onClickLogIn = async e => {\r\n    setIsBusy(true);\r\n    try {\r\n      await login();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    setIsBusy(false);\r\n  };\r\n\r\n  const onClickSignUp = e => {\r\n    console.log(\"signup\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <video className=\"video-background\" autoPlay loop muted>\r\n        <source src=\"/assets/video/starfield.mp4\" type=\"video/mp4\" />\r\n        Your browser does not support HTML5 video.\r\n      </video>\r\n\r\n      <div className=\"logo-container\">\r\n        <img src=\"/assets/img/logo512.png\" className=\"App-logo\" alt=\"logo\" />\r\n      </div>\r\n\r\n      <div className=\"content-bottom\">\r\n        <h1>Chatting Star</h1>\r\n\r\n        <button className=\"btn-transp-round\" onClick={onClickSignUp}>\r\n          +\r\n        </button>\r\n\r\n        <input\r\n          type=\"email\"\r\n          className=\"input-transp\"\r\n          placeholder=\"email\"\r\n        ></input>\r\n        <input\r\n          type=\"password\"\r\n          className=\"input-transp\"\r\n          placeholder=\"password\"\r\n        ></input>\r\n\r\n        <button className=\"btn-transp\" onClick={onClickLogIn}>\r\n          Log In\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useHistory,\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport \"../App.scss\";\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <div>\r\n      <video className=\"video-background\" autoPlay loop muted>\r\n        <source src=\"/assets/video/starfield.mp4\" type=\"video/mp4\" />\r\n        Your browser does not support HTML5 video.\r\n      </video>\r\n\r\n      <div className=\"panels\">\r\n        <div className=\"panel-ad\"></div>\r\n        <div className=\"panel-main\"></div>\r\n        <div className=\"panel-chat\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useHistory,\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport { fakeAuth } from \"../modules/fakeAuth.js\";\r\n// A wrapper for <Route> that redirects to the login\r\n// screen if you're not yet authenticated.\r\nexport function PrivateRoute({ children, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        fakeAuth.isAuthenticated ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"./App.scss\";\nimport { LogIn } from \"./pages/LogIn.js\";\nimport { Home } from \"./pages/Home.js\";\nimport { PrivateRoute } from \"./components/PrivateRoute.js\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/login\">\n          <LogIn />\n          {/* <Home /> */}\n        </Route>\n        <PrivateRoute path=\"/\">\n          <Home />\n        </PrivateRoute>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}